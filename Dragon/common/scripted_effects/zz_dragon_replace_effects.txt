# Fix for paper mills
save_industrialized_pm_building_and_state = {
	random_scope_building = {
		limit = {
			OR = {
				AND = {
					is_building_type = building_textile_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_mechanized_looms
							}
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_automatic_power_looms
							}
						}
					}
				}
				AND = {
					is_building_type = building_furniture_manufacturies
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_mechanized_workshops
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_watertube_boiler_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_rotary_valve_engine_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_assembly_lines_building_furniture_manufacturies
							}
						}
					}
				}
				AND = {
					is_building_type = building_tooling_workshops
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_watertube_boiler_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_rotary_valve_engine_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_assembly_lines_building_tooling_workshops
							}
						}
					}
				}
				AND = {
					is_building_type = building_paper_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_watertube_boiler_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_rotary_valve_engine_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_assembly_lines_building_furniture_manufacturies
							}
						}
					}
				}
				AND = {
					is_building_type = building_steel_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_watertube_boiler_building_steel_mills
							}
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_rotary_valve_engine_building_steel_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_motor_industry
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_watertube_boiler_building_motor_industry
							}
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_rotary_valve_engine_building_motor_industry
							}
						}
					}
				}
			}
		}

		save_scope_as = industrialized_pm_building
		state = {
			save_scope_as = industrialized_pm_state
		}
	}
}

calculate_communism_progress = {
	set_variable = { name = communism_progress_var_next value = 0 }
	set_variable = { name = communism_progress_from_radicals value = 0 }
	every_scope_state = {
		limit = {
			# is_incorporated = yes
			turmoil >= 0.05 # 0.10
		}
		ROOT = {
			change_variable = { name = communism_progress_from_radicals add = prev.turmoil }
		}
	}
	change_variable = { name = communism_progress_from_radicals multiply = 2 }
	set_variable = { name = communism_progress_from_loyalists value = 0 }
	every_scope_state = {
		limit = {
			is_incorporated = yes
			loyalty >= 0.10
		}
		ROOT = {
			change_variable = { name = communism_progress_from_loyalists add = prev.loyalty }
		}
	}
	change_variable = { name = communism_progress_from_loyalists multiply = -0.05 }
	#From Poverty
	set_variable = { name = communism_progress_from_poverty value = 0 }
	every_scope_state = {
		limit = {
			is_incorporated = yes
		}
		set_variable = { name = temp_sol value = this.population_below_expected_sol } 
		change_variable = { name = temp_sol multiply = this.state_population }
		change_variable = { name = temp_sol divide = root.total_population }
		change_variable = { name = temp_sol multiply = 10 } # This variable equals the percentage of pops in incorporated states below expected SoL times ten. If 25% of your pops in incorporated states are below expected SoL, this will equal 2.5.
		ROOT = {
			change_variable = { name = communism_progress_from_poverty add = prev.var:temp_sol }
		}
	}
	change_variable = { name = communism_progress_from_poverty multiply = 2 }
	#From Characters
	set_variable = { name = communism_progress_from_characters value = 0 }
	every_scope_character = {
		limit = {
			OR = {
				has_ideology = ideology:ideology_communist
				has_ideology = ideology:ideology_vanguardist
				has_ideology = ideology:ideology_anarchist
			}
		}
		ROOT = {
			change_variable = { name = communism_progress_from_characters add = prev.popularity }
		}
	}
	change_variable = { name = communism_progress_from_characters divide = 100 }
	# From Interest Groups
	set_variable = { name = communism_progress_from_igs value = 0 }
	every_interest_group = {
		limit = {
			law_stance = {
				law = law_type:law_council_republic
				value > neutral
			}
		}
		ROOT = {
			change_variable = { name = communism_progress_from_igs add = { value = prev.ig_clout multiply = 20 } }
		}
	}
	# From Laws
	set_variable = { name = communism_progress_from_laws value = 0 }
	# Cops
	set_variable = { name = temp_policing_var_contribution value = institution:institution_police.investment }
	if = {
		limit = {
			has_law = law_type:law_no_police
		}
		change_variable = { name = temp_policing_var_contribution add = 0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_local_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_dedicated_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.2 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_militarized_police
		}
		change_variable = { name = temp_policing_var_contribution multiply = -0.3 }
	}
	
	# Internal Affairs
	set_variable = { name = temp_ha_var_contribution value = institution:institution_home_affairs.investment }
	if = {
		limit = {
			has_law = law_type:law_no_home_affairs
		}
		change_variable = { name = temp_ha_var_contribution add = 0.3 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_guaranteed_liberties
		}
		change_variable = { name = temp_ha_var_contribution multiply = 0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_national_guard
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.1 }
	}
	else_if = {
		limit = {
			has_law = law_type:law_secret_police
		}
		change_variable = { name = temp_ha_var_contribution multiply = -0.3 }
	}
	change_variable = { name = communism_progress_from_laws add = var:temp_policing_var_contribution }
	change_variable = { name = communism_progress_from_laws add = var:temp_ha_var_contribution }
	remove_variable = temp_policing_var_contribution
	remove_variable = temp_ha_var_contribution

	# Compilation
	change_variable = { name = communism_progress_var_next add = var:communism_progress_from_radicals }
	# change_variable = { name = communism_progress_var_next add = var:communism_progress_from_loyalists }
	change_variable = { name = communism_progress_var_next add = var:communism_progress_from_poverty }
	change_variable = { name = communism_progress_var_next add = var:communism_progress_from_igs }
	change_variable = { name = communism_progress_var_next add = var:communism_progress_from_characters }
	change_variable = { name = communism_progress_var_next add = var:communism_progress_from_laws }
	change_variable = { name = communism_progress_var_next add = var:communism_progress_var_add }
	# change_variable = { name = communism_progress_var_next multiply = 2 }
}

unification_claims_effect = {
	add_loyalists = {
		value = 0.05
	}
}
